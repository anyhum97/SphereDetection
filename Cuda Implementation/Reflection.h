#pragma once

#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <iostream>

////////////////////////////////////////////////////////////////////////

template <typename Type>

struct Reflection
{
	Type* host = nullptr;
	Type* device = nullptr;

	unsigned int size = 0;
};

////////////////////////////////////////////////////////////////////////

template <typename Type>

Reflection<Type> Malloc(const unsigned int count);

////////////////////////////////////////////////////////////////////////

template <typename Type>

Reflection<Type> Malloc(Type* hostBuffer, const unsigned int count, bool send);

////////////////////////////////////////////////////////////////////////

template <typename Type>

void Free(Reflection<Type>& reflection);

////////////////////////////////////////////////////////////////////////

template <typename Type>

bool IsValid(Reflection<Type>& reflection);

////////////////////////////////////////////////////////////////////////

template <typename Type>

bool Send(Reflection<Type>& reflection);

////////////////////////////////////////////////////////////////////////

template <typename Type>

bool Send(Reflection<Type>& reflection, const unsigned int count);

////////////////////////////////////////////////////////////////////////

template <typename Type>

bool Receive(Reflection<Type>& reflection);

////////////////////////////////////////////////////////////////////////

template <typename Type>

bool Receive(Reflection<Type>& reflection, const unsigned int count);

////////////////////////////////////////////////////////////////////////

template <typename Type>

Type* Host(Reflection<Type>& reflection);

////////////////////////////////////////////////////////////////////////

template <typename Type>

Type* Device(Reflection<Type>& reflection);

////////////////////////////////////////////////////////////////////////

template <typename Type>

void Show(Reflection<Type>& reflection, unsigned int count = 0);

////////////////////////////////////////////////////////////////////////







